
snippet m "class method" b
def $1(self$2):
  $3
endsnippet

snippet m_ "class magical method" b
def __$1__(self$2):
  $3
endsnippet

snippet sm "static class method" b
@staticmethod
def $1($2):
  $3
endsnippet

snippet sm_ "static magic method" b
@staticmethod
def __$1__(cls$2):
  $3
endsnippet

snippet cm "class class method" b
@classmethod
def $1(cls$2):
  $3
endsnippet

snippet cm_ "class magic method" b
@classmethod
def __$1__(cls$2):
  $3
endsnippet

snippet f "function" b
def $1($2):
  $3
endsnippet

snippet s. "self." 
self.
endsnippet

snippet si "self initialization" b
self.$1 = $1
endsnippet

snippet s= "self initialization dif" b
self.$1 = $2
endsnippet

snippet i "import" b
import $1
endsnippet

snippet fi "import from" b
from $1 import $2
endsnippet

snippet fia "import from as" b
from $1 import $2 as $3
endsnippet

snippet cl "class (object):" b
class $1(${2:object}):
  """
  $3
  """
  def __init__(self$4):
    $5
endsnippet

snippet cle "class (RuntimeError)" b
class $1(${2:RuntimeError}):
	pass
endsnippet

snippet p "print" b
print("$1")$3
endsnippet

snippet pp "pprint" b
pprint($1)$3
endsnippet

snippet r "return" b
return $1
endsnippet

snippet y "yield" b 
yield $1
endsnippet

snippet '(' "gen_comp" i
( $3 for $1 in $2 ) $4
endsnippet

priority 0
snippet [ "list_comp" i
[ $3 for $1 in $2 ] $4
endsnippet

priority 5
snippet {{ "set_comp" i
{ $3 for $1 in $2 } $4
endsnippet

priority 0
snippet { "dict_comp" i
{ $3 : $4 for $1 in $2 } $5
endsnippet


snippet "for " "for" brA
for $1 in $2 :
	$3
endsnippet

snippet "if " "if" brA
if $1 :
	$2
endsnippet

snippet "elif " "elif" brA
elif $1 :
	$2
endsnippet

snippet "else " "else" brA
else :
	$2
endsnippet

snippet "while " "while" brA
while $1 :
	$2
endsnippet

snippet "with " "with" brA
with $1 :
	$2
endsnippet

snippet "try " "try" brA
try :
	$1
except $2:
	$3
endsnippet

snippet l "lambda" w
lambda $1: $2
endsnippet

snippet clt "Test case" b
class Test$1(ut.TestCase):
	"""
	Test $1 $2
	"""
	
	def setUp(self):
		${3:pass}
	
	def tearDown(self):
		${4:pass}
	$0
endsnippet

snippet mt "test method" b
def test_$1(self$2):
	$3
endsnippet

snippet Dbug "import dbug" b
from dbug import *
endsnippet

snippet Dvar "Dvar" b
Dvar(r"""$1"""$2)
endsnippet

snippet nDvar "nDvar" b
nDvar(r"""$1"""$2)
endsnippet

snippet DNL "DNL" b
DNL()
endsnippet

snippet DWAI "DWAI" b
DWAI()
endsnippet

snippet nDWAI "nDWAI" b
nDWAI()
endsnippet

snippet D "D" b
D($1)
endsnippet

snippet nD "nD" b
nD($1)
endsnippet

snippet * "*args" i
*args
endsnippet

priority 1

snippet ** "**kwargs" i
**kwargs
endsnippet


snippet flask "Flask app" b

from functools import wraps
import flask
from flask import Flask, abort, request
from werkzeug.wrappers import ResponseStreamMixin
from werkzeug.exceptions import HTTPException, NotFound

${1:app} = Flask('$2')

endsnippet

snippet route "@app.route"

@${1:app}.route('$2'$3)
def $4($5):
	"""
	$6
	"""
	$7
endsnippet

snippet !int:! "flask int parameter" ir
<int:$1>$0
endsnippet

snippet "string:" "flask string parameter" ir
<string:$1>$0
endsnippet

snippet "path:" "flask path parameter" ir
<path:$1>$0
endsnippet

snippet NI "raise NotImplementedError" b
raise NotImplementedError
endsnippet



snippet m "class method" b
def $1(self$2):
	$3
endsnippet

snippet m_ "class magical method" b
def __$1__(self$2):
	$3
endsnippet

snippet sm "static class method" b
@staticmethod
def $1($2):
	$3
endsnippet

snippet sm_ "static magic method" b
@staticmethod
def __$1__(cls$2):
	$3
endsnippet

snippet cm "class class method" b
@classmethod
def $1(cls$2):
	$3
endsnippet

snippet cm_ "class magic method" b
@classmethod
def __$1__(cls$2):
	$3
endsnippet

snippet prop "Property" b
@property
def $1(self):
	$2
endsnippet

snippet f "function" b
def $1($2):
	$3
endsnippet

snippet s. "self." 
self.
endsnippet

snippet si "self initialization" b
self.$1 = $1
endsnippet

snippet = "same equal" i
$1=$1
endsnippet

snippet "= " "same equal space" i
$1 = $1
endsnippet

snippet s= "self initialization dif" b
self.$1 = $2
endsnippet

snippet i "import" b
import $1
endsnippet

snippet fi "import from" b
from $1 import $2
endsnippet

snippet fia "import from as" b
from $1 import $2 as $3
endsnippet

snippet cl "class (object):" b
class $1(${2:object}):
	"""
	$3
	"""
	def __init__(self$4):
		$5
endsnippet

snippet cle "class (RuntimeError)" b
class $1(${2:RuntimeError}):
	pass
endsnippet

snippet p "print" b
print("$1")$3
endsnippet

snippet pp "pprint" b
pprint($1)$3
endsnippet

snippet r "return" b
return $1
endsnippet

snippet y "yield" b 
yield $1
endsnippet

snippet '(' "gen_comp" i
( $3 for $1 in $2 ) $4
endsnippet

priority 0
snippet [ "list_comp" i
[ $3 for $1 in $2 ] $4
endsnippet

priority 5
snippet {{ "set_comp" i
{ $3 for $1 in $2 } $4
endsnippet

priority 0
snippet { "dict_comp" i
{ $3 : $4 for $1 in $2 } $5
endsnippet


snippet "for " "for" brA
for $1 in $2 :
	$3
endsnippet

snippet "if " "if" brA
if $1 :
	$2
endsnippet

snippet "elif " "elif" brA
elif $1 :
	$2
endsnippet

snippet "else " "else" brA
else :
	$2
endsnippet

snippet "while " "while" brA
while $1 :
	$2
endsnippet

snippet "with " "with" brA
with $1 :
	$2
endsnippet

snippet "try " "try" brA
try :
	$1
except $2:
	$3
endsnippet

snippet 'l ' "lambda" r
lambda $1: $2
endsnippet

snippet test "test case" b
import unittest as ut

class Test$1(ut.TestCase):
	"""
	Test $1 $2
	"""
	
	def setUp(self):
		${3:pass}
	
	def tearDown(self):
		${4:pass}
	$0
endsnippet

snippet clt "Test case" b
class Test$1(ut.TestCase):
	"""
	Test $1 $2
	"""
	
	def setUp(self):
		${3:pass}
	
	def tearDown(self):
		${4:pass}
	$0
endsnippet

snippet mt "test method" b
def test_$1(self$2):
	$3
endsnippet

snippet Dbug "import dbug" b
from dbug import *
endsnippet

snippet b "breakpoint" 
breakpoint()
endsnippet

snippet b "breakpoint" b
breakpoint()
endsnippet

snippet Dvar "Dvar" b
Dvar(r"""$1"""$2)
endsnippet

snippet nDvar "nDvar" b
nDvar(r"""$1"""$2)
endsnippet

snippet DNL "DNL" b
DNL()
endsnippet

snippet DWAI "DWAI" b
DWAI()
endsnippet

snippet nDWAI "nDWAI" b
nDWAI()
endsnippet

snippet Dbg "Dbg" b
Dbg()
endsnippet

snippet D "D" b
D($1)
endsnippet

snippet nD "nD" b
nD($1)
endsnippet

snippet * "*args" i
*args
endsnippet

priority 1

snippet ** "**kwargs" i
**kwargs
endsnippet

priority 2

snippet *** "*args, **kwargs" i
*args, **kwargs
endsnippet

priority 0

snippet flask "Flask app" b

from functools import wraps
import flask
from flask import Flask, abort, request
from werkzeug.wrappers import ResponseStreamMixin
from werkzeug.exceptions import HTTPException, NotFound

${1:app} = Flask('$2')

endsnippet

snippet route "@app.route"
@${1:app}.route('$2'$3)
def $4($5):
	"""
	$6
	"""
	$7
endsnippet

snippet !int:! "flask int parameter" ir
<int:$1>$0
endsnippet

snippet "string:" "flask string parameter" ir
<string:$1>$0
endsnippet

snippet "path:" "flask path parameter" ir
<path:$1>$0
endsnippet

snippet NI "raise NotImplementedError" b
raise NotImplementedError($1)$0
endsnippet


snippet mod "Model" b
@export
class $1(PrefixerBase):
	__tablename_suffix__ = '$1'
	
	id = sa.Column(Types.Id, primary_key = True)
	$0
endsnippet

snippet col "Col" b
$1 = sa.Column(Types.$2, ${3:index = True})
endsnippet


snippet cli "Click cli" b
import click


@click.group()
def main():
	pass

@main.command(name="$1")
def $1():
	$2

if __name__ == "__main__" :
	main()

endsnippet

snippet cmd "Click cmd" b
`!p
r = re.compile(r'-(\w)')
if t[1] != 'main':
	camel = t[1]
	suffix = t[2].capitalize()
else :
	camel = ''
	suffix = t[2]
camel+=r.sub(lambda m:m[1].upper(), suffix)
`@$1.command(name='$2')
def `!p snip.rv=camel`():
	$3
endsnippet

snippet arg "Click argument" b
@click.argument('$1')
endsnippet

snippet opt "Click opt" b
@click.option('--$1', '-$2', type=${3:str})
endsnippet

snippet gr "Click group" b
@$1.group()
def $2():
	pass
endsnippet

snippet pm "Post mortem debug"
import pdb; pdb.xpm()
endsnippet	

snippet yn "Yagflow node" b
{
	"name" : "$1",
	"type" : "$2",
	"conf" : {
		$3
	},
	"input" : {
		$4
	}
},
$0
endsnippet

snippet yi "Yagflow node input" b
"$1" : {
	"node" : "$2",
	"port" : "$3",
},$0
endsnippet

snippet df "dict field" b
"$1" : $2,$0
endsnippet


snippet ### "### Title ###"
`!p
l = len(t[1])
v1 = (78 // 2 - l // 2)
snip.rv = '#' * v1
` $1 `!p
snip.rv = '#' * (78 - v1 - l)
`
endsnippet

snippet "^(?P<start>((.*)\D)?)(?P<n>\d+)(?P<top>.*),(?P<left>.*),(?P<right>.*),(?P<bottom>.*)(?P<type>\#|\~)" "Generic title" br
`!p
m = match
start = m['start']
l1 = len(start)
n = int(m['n'])
r = n - l1
snip.rv = '\n'.join( (start + (c * r)) for c in m['top'] )
# snip.rv = start
`
`!p
l = len(t[1])
v1 = ((r-2) // 2 - l // 2)
if m['type'] == '#':
	snip.rv = start + (m['left'] or ' ') * v1
else:
	snip.rv = start + m['left'] + ' ' * (v1 - len(m['left']))
` $1 `!p
v2 = ((r-2) - v1 - l)
if m['type'] == '#':
	snip.rv = (m['right'] or ' ') * v2
else:
	snip.rv = ' ' * (v2 - len(m['right'])) + m['right']
`
`!p
snip.rv = '\n'.join( (start + c * r) for c in m['bottom'] )
`
endsnippet

snippet xpm "post mortem" b
import pdb; pdb.xpm()
endsnippet

snippet main "main function" b
if __name__ == "__main__":
	${1:main()}
endsnippet


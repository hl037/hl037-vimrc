priority 0

global !p
from vim_hl037.UltiSnips import *
from vim_hl037.UltiSnips.python import *

endglobal

context "eol(snip)"
snippet m "class method" b
def $1(self$2):
	$3
endsnippet

context "eol(snip)"
snippet m_ "class magical method" b
def __$1__(self$2):
	$3
endsnippet

context "eol(snip)"
snippet sm "static class method" b
@staticmethod
def $1($2):
	$3
endsnippet

context "eol(snip)"
snippet sm_ "static magic method" b
@staticmethod
def __$1__(cls$2):
	$3
endsnippet

context "eol(snip)"
snippet cm "class class method" b
@classmethod
def $1(cls$2):
	$3
endsnippet

context "eol(snip)"
snippet cm_ "class magic method" b
@classmethod
def __$1__(cls$2):
	$3
endsnippet

context "eol(snip)"
snippet am "class method" b
async def $1(self$2):
	$3
endsnippet

context "eol(snip)"
snippet am_ "class magical method" b
async def __$1__(self$2):
	$3
endsnippet

context "eol(snip)"
snippet asm "static class method" b
@staticmethod
async def $1($2):
	$3
endsnippet

context "eol(snip)"
snippet asm_ "static magic method" b
@staticmethod
async def __$1__(cls$2):
	$3
endsnippet

context "eol(snip)"
snippet acm "class class method" b
@classmethod
async def $1(cls$2):
	$3
endsnippet

context "eol(snip)"
snippet acm_ "class magic method" b
@classmethod
async def __$1__(cls$2):
	$3
endsnippet


context "eol(snip)"
snippet mprop "Property" b
@property
def $1(self):
	$2

@$1.setter
def $1(self, val):
	$3
endsnippet

context "eol(snip)"
snippet mmprop "Property" b
@property
def $1(self):
	return $2

@$1.setter
def $1(self, val):
	$2 = val
endsnippet

context "eol(snip)"
snippet prop "Property" b
@property
def $1(self):
	$2
endsnippet

context "eol(snip)"
snippet cprop "Cached Property" b
@cached_property
def $1(self):
	$2
endsnippet

context "eol(snip)"
snippet Cprop "init cached property" 
from functools import cached_property
endsnippet

context "eol(snip)"
snippet f "function" b
def $1($2):
	$3
endsnippet

context "eol(snip)"
snippet af "function" b
async def $1($2):
	$3
endsnippet

snippet s. "self." 
self.
endsnippet

context "eol(snip)"
snippet si "self initialization" b
self.$1 = $1
endsnippet


snippet "\.\=" "variable initialisation" r
.$2 = $2
endsnippet


snippet "\['\=" "array initialization" r
['$1'] = $1
endsnippet

snippet '\["\=' "array initialization 2" r 
["$1"] = $1
endsnippet

snippet sup "super()"
super()
endsnippet

context "inFunction(snip)"
snippet supi "super().__init__()"
super().`!p snip.rv = snip.context[0]`($1)
endsnippet

snippet s "self"
self
endsnippet

priority -1

snippet = "same equal" i
$1=$1
endsnippet

snippet "= " "same equal space" i
$1 = $1
endsnippet

priority 0

snippet s= "self initialization dif" b
self.$1 = $2
endsnippet

context "eol(snip)"
snippet i "import" b
import $1
endsnippet

context "eol(snip)"
snippet fi "import from" b
from $1 import $2
endsnippet

context "eol(snip)"
snippet fia "import from as" b
from $1 import $2 as $3
endsnippet

context "eol(snip)"
snippet cl "class (object):" b
class $1(${2:object}):
	"""
	$3
	"""
	def __init__(self$4):
		$5
endsnippet

context "eol(snip)"
snippet dcl "dataclass (object):" b
@dataclass
class $1(${2:object}):
	"""
	$3
	"""
	$4
endsnippet

context "eol(snip)"
snippet cle "class (RuntimeError)" b
class $1(${2:RuntimeError}):
	pass
endsnippet

snippet p "print" b
print('$1')$3
endsnippet

snippet Tpf "Tpf" b
print(f'TTT {$1=}')
endsnippet

snippet pf "print f''" b
print(f'$1')$3
endsnippet

snippet pp "pprint" b
pprint($1)$3
endsnippet

context "eol(snip)"
snippet r "return" b
return $1
endsnippet

context "eol(snip)"
snippet y "yield" b 
yield $1
endsnippet

context "eol(snip)"
snippet '(' "gen_comp" i
( $3 for $1 in $2 ) $4
endsnippet

priority 0
context "eol(snip)"
snippet [ "list_comp" i
[ $3 for $1 in $2 ] $4
endsnippet

priority 5
context "eol(snip)"
snippet {{ "set_comp" i
{ $3 for $1 in $2 } $4
endsnippet

priority 0
context "eol(snip)"
snippet { "dict_comp" i
{ $3 : $4 for $1 in $2 } $5
endsnippet


context "eol(snip)"
snippet "for " "for" brA
for $1 in $2 :
	$3
endsnippet

context "eol(snip)"
snippet "fors " "fors" brA
for $1 in $1s :
	$2
endsnippet

context "eol(snip)"
snippet "if " "if" brA
if $1 :
	$2
endsnippet

context "eol(snip)"
snippet "elif " "elif" brA
elif $1 :
	$2
endsnippet

context "eol(snip)"
snippet "else " "else" brA
else :
	$2
endsnippet

context "eol(snip)"
snippet "while " "while" brA
while $1 :
	$2
endsnippet

context "eol(snip)"
snippet "match " "match" brA
match $1 :
	$2
endsnippet

context "eol(snip)"
snippet "case " "case" brA
case $1 :
	$2
endsnippet

context "maybeMatchCase(snip)"
snippet "c " "case" brA
case $1 :
	$2
endsnippet

context "maybeMatchCase(snip)"
snippet "_ " "case _" brA
case _ :
	$2
endsnippet

context "eol(snip)"
snippet "with " "with" brA
with $1 :
	$2
endsnippet

context "eol(snip)"
snippet "try " "try" brA
try :
	$1
except $2:
	$3
endsnippet

context "eol(snip)"
snippet "except " "except" brA
except $1:
	$2
endsnippet

snippet 'l:' "lambda" r
lambda $1: $2
endsnippet

# snippet test "test case" b
# import unittest as ut
# 
# class Test$1(ut.TestCase):
# 	"""
# 	Test $1 $2
# 	"""
# 	
# 	def setUp(self):
# 		${3:pass}
# 	
# 	def tearDown(self):
# 		${4:pass}
# 	$0
# endsnippet
# 
# snippet clt "Test case" b
# class Test$1(ut.TestCase):
# 	"""
# 	Test $1 $2
# 	"""
# 	
# 	def setUp(self):
# 		${3:pass}
# 	
# 	def tearDown(self):
# 		${4:pass}
# 	$0
# endsnippet

context "eol(snip)"
snippet clt "test case" 
class Test$1():
	"""
	Test $1 $2
	"""

	$0
endsnippet

context "eol(snip)"
snippet ft "test function" b
def test_$1($2):
	$3
endsnippet

context "eol(snip)"
snippet aft "test function" b
async def test_$1($2):
	$3
endsnippet

context "eol(snip)"
snippet mt "test method" b
def test_$1(self$2):
	$3
endsnippet

context "eol(snip)"
snippet amt "test method" b
async def test_$1(self$2):
	$3
endsnippet

context "eol(snip)"
snippet paramt "parameterize test" 
@pytest.mark.parametrize('$1', [
	$2
])
endsnippet

snippet Dbug "import dbug" b
from dbug import *
endsnippet

snippet b "breakpoint" b
breakpoint()
endsnippet

snippet Dvar "Dvar" b
Dvar(r"""$1"""$2)
endsnippet

snippet nDvar "nDvar" b
nDvar(r"""$1"""$2)
endsnippet

snippet DNL "DNL" b
DNL()
endsnippet

snippet WAI "DWAI" b
DWAI()
endsnippet

snippet nDWAI "nDWAI" b
nDWAI()
endsnippet

snippet Dbg "Dbg" b
Dbg()
endsnippet

snippet D "D" b
D($1)
endsnippet

snippet nD "nD" b
nD($1)
endsnippet

snippet * "*args" i
*args
endsnippet

priority 1

snippet ** "**kwargs" i
**kwargs
endsnippet

priority 2

snippet *** "*args, **kwargs" i
*args, **kwargs
endsnippet

snippet NI "raise NotImplementedError" b
raise NotImplementedError($1)$0
endsnippet

snippet isi "isinstance" i
isinstance($1, $2)$0
endsnippet

snippet isc "issubclass" i
issubclass($1, $2)$0
endsnippet

# Flask

priority 0

snippet flask "Flask app" b

from functools import wraps
import flask
from flask import Flask, abort, request
from werkzeug.wrappers import ResponseStreamMixin
from werkzeug.exceptions import HTTPException, NotFound

${1:app} = Flask('$2')

endsnippet

snippet route "@app.route"
@${1:app}.route('$2'$3)
def $4($5):
	"""
	$6
	"""
	$7
endsnippet

snippet !int:! "flask int parameter" ir
<int:$1>$0
endsnippet

snippet "string:" "flask string parameter" ir
<string:$1>$0
endsnippet

snippet "path:" "flask path parameter" ir
<path:$1>$0
endsnippet

# SQLA

# snippet mod "Model" b
# @export
# class $1(PrefixerBase):
# 	__tablename_suffix__ = '$1'
# 	
# 	id = sa.Column(Types.Id, primary_key = True)
# 	$0
# endsnippet
snippet mod "Model" b
class $1(PrefixerBase):
	id = sa.Column(Types.Id, primary_key = True)
	$0
endsnippet

snippet col "Col" b
$1 = sa.Column(Types.$2, ${3:index = True})
endsnippet

priority -1
context "eol(snip)"
snippet col "Col, after"
sa.Column(Types.$2, ${3:index = True})
endsnippet

priority 0

snippet pk "primary key"
primary_key=True
endsnippet

# Click


snippet cli "Click cli" b
import click


@click.group()
def main():
	pass

@main.command(name="$1")
def $1():
	$2

if __name__ == "__main__" :
	main()

endsnippet

snippet cli1 "Click cli" b
import click


@click.command()
def main():
	$1

if __name__ == "__main__" :
	main()

endsnippet


snippet cmd "Click cmd" b
`!p
r = re.compile(r'-(\w)')
if t[1] != 'main':
	camel = t[1]
	suffix = t[2].capitalize()
else :
	camel = ''
	suffix = t[2]
camel+=r.sub(lambda m:m[1].upper(), suffix)
`@$1.command(name='$2')
def `!p snip.rv=camel`():
	$3
endsnippet

snippet arg "Click argument" b
@click.argument('$1')
endsnippet

snippet opt "Click opt" b
@click.option('--$1', '-$2', type=${3:str})
endsnippet

snippet flag "Click flag" b
@click.option('--$1', '-$2', is_flag=True)
endsnippet

snippet gr "Click group" b
@$1.group()
def $2():
	pass
endsnippet

snippet pm "Post mortem debug"
import pdb; pdb.xpm()
endsnippet	

snippet yn "Yagflow node" b
{
	"name" : "$1",
	"type" : "$2",
	"conf" : {
		$3
	},
	"input" : {
		$4
	}
},
$0
endsnippet

snippet yi "Yagflow node input" b
"$1" : {
	"node" : "$2",
	"port" : "$3",
},$0
endsnippet

snippet df "dict field" b
"$1" : $2,$0
endsnippet


snippet ### "### Title ###"
`!p
l = len(t[1])
v1 = (78 // 2 - l // 2)
snip.rv = '#' * v1
` $1 `!p
snip.rv = '#' * (78 - v1 - l)
`
endsnippet

snippet "^(?P<start>((.*)\D)?)(?P<n>\d+)(?P<top>.*),(?P<left>.*),(?P<right>.*),(?P<bottom>.*)(?P<type>\#|\~)" "Generic title" br
`!p
m = match
start = m['start']
l1 = len(start)
n = int(m['n'])
r = n - l1
snip.rv = '\n'.join( (start + (c * r)) for c in m['top'] )
# snip.rv = start
`
`!p
l = len(t[1])
v1 = ((r-2) // 2 - l // 2)
if m['type'] == '#':
	snip.rv = start + (m['left'] or ' ') * v1
else:
	snip.rv = start + m['left'] + ' ' * (v1 - len(m['left']))
` $1 `!p
v2 = ((r-2) - v1 - l)
if m['type'] == '#':
	snip.rv = (m['right'] or ' ') * v2
else:
	snip.rv = ' ' * (v2 - len(m['right'])) + m['right']
`
`!p
snip.rv = '\n'.join( (start + c * r) for c in m['bottom'] )
`
endsnippet

snippet xpm "post mortem" b
import pdb; pdb.xpm()
endsnippet

snippet main "main function" b
if __name__ == "__main__":
	${1:main()}
endsnippet

# CopyCall

snippet ccf "Copycall field" b
('$1', $2),
endsnippet

snippet ccS "Copycall Struct" b
class $1(Struct):
	_fields_ = [
		$2
	]
endsnippet

snippet ccU "Copycall Struct" b
class $1(Union):
	_fields_ = [
		$2
	]
endsnippet

snippet ccP "Copycall Packet" b
@$1.packet(**peerArgs('$2'))
class $3(Struct):
	_fields_ = [
		$4
	]
endsnippet	

snippet ccF "Copycall Function" b
class $1(Function, copycall=$2):
	_res_ = ${3:None}
	_args_ = [
		$4
	]
endsnippet

snippet ccCh "Copycall Chunks" b
_in_chunks_ = [
	$1
]
_out_chunks_ = [
	$2
]
endsnippet

snippet ccsi "Copycall size info"
_size_info_list_ = [
	$1
]
endsnippet

snippet ub "Ultisnips breakpoint" b
from UltiSnips.remote_pdb import RemotePDB;RemotePDB.breakpoint()
endsnippet


# snippet test1 "test"
# `!p
# import sys
# if 'dummy' not in sys.modules:
# 	sys.modules['dummy'] = 'tt'
# 	snip.rv=''
# else:
# 	snip.rv='tt'
# `
# endsnippet
# 
# 
# 
# snippet test2 "test"
# `!p
# import sys
# if 'dummy' not in sys.modules:
# 	sys.modules['dummy'] = 'tt'
# else:
# 	snip.rv='tt'
# `
# endsnippet
# 
# 
# 
# 
# snippet test "test"
# `!p
# 
# ``!p
# import sys
# if 'dummy' not in sys.modules:
# 	sys.modules['dummy'] = 'tt'
# else:
# 	snip.rv='tt'
# `
# endsnippet
# snippet test3 "" 
# `!p
# snip.store.snippet["Test"]="tt"
# snip.rv=""
# ``!p
# snip.rv=snip.store.snippet["Test", ""]
# `
# endsnippet
# 
# 
# snippet test4 "test"
# `!p import sys;sys.modules['dummy'] = 'tt';snip.rv=''``!p snip.rv=sys.modules.get('dummy', '')`
# endsnippet
# 
# 
# snippet test5 "test"
# `!p
# 
# import sys
# 
# if 'dummy' not in sys.modules:
# 	sys.modules['dummy'] = 't1'
# 
# #snip.rv=''
# 
# ``!p
# 
# if 'dummy' not in sys.modules:
# 	snip.rv = ''
# elif sys.modules['dummy'] == "t1":
# 	sys.modules['dummy'] = 't2'
# 	snip.rv = ''
# else:
# 	snip.rv = 'tt'
# 	
# `
# endsnippet

snippet dbg "" 
`!p
from UltiSnips.remote_pdb import RemotePDB
RemotePDB.breakpoint()
`
endsnippet


snippet dbge "" 
`!p
raise RuntimeError('TEST')
`
endsnippet

snippet iic "import iceream" b
from icecream import ic
endsnippet


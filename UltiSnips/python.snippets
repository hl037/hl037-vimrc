
snippet m "class method" b
def $1(self$2):
  $3
endsnippet

snippet m_ "class magical method" b
def __$1__(self$2):
  $3
endsnippet

snippet sm "static class method" b
@staticmethod
def $1($2):
  $3
endsnippet

snippet sm_ "static magic method" b
@staticmethod
def __$1__(cls$2):
  $3
endsnippet

snippet cm "class class method" b
@classmethod
def $1(cls$2):
  $3
endsnippet

snippet cm_ "class magic method" b
@classmethod
def __$1__(cls$2):
  $3
endsnippet

snippet f "function" b
def $1($2):
  $3
endsnippet

snippet s. "self." 
self.
endsnippet

snippet si "self initialization" b
self.$1 = $1
endsnippet

snippet s= "self initialization dif" b
self.$1 = $2
endsnippet

snippet i "import" b
import $1
endsnippet

snippet fi "import from" b
from $1 import $2
endsnippet

snippet fia "import from as" b
from $1 import $2 as $3
endsnippet

snippet cl "class (object):" b
class $1(${2:object}):
  """
  $3
  """
  def __init__(self$4):
    $5
endsnippet

snippet p "print" b
print("$1")$3
endsnippet

snippet pp "pprint" b
pprint($1)$3
endsnippet

snippet r "return" b
return $1
endsnippet

snippet y "yield" b 
yield $1
endsnippet

snippet [ "list_comp" b
[ $3 for $1 in $2 ] $4
endsnippet

snippet ( "gen_comp" b
( $3 for $1 in $2 ) $4
endsnippet

snippet { "dict_comp" b
{ $3 : $4 for $1 in $2 ) $5
endsnippet

snippet {{ "set_comp" b
{ $3 for $1 in $2 } $4
endsnippet

snippet for "for" b
for $1 in $2 :
  $3
endsnippet

snippet if "if" b
if $1 :
  $2
endsnippet

snippet elif "elif" b 
elif $1 :
  $2
endsnippet

snippet else "else" b
else :
  $2
endsnippet

snippet while "while" b
while $1 :
  $2
endsnippet

snippet try "try" b
try :
  $1
except $2:
  $3
endsnippet

snippet l "lambda"
lambda $1 : $2
endsnippet

snippet clt "Test case" b
class Test$1(ut.TestCase):
	"""
	Test $1 $2
	"""
	
	def setUp(self):
		${3:pass}
	
	def tearDown(self):
		${4:pass}
	$0
endsnippet

snippet mt "test method" b
def test_$1(self$2):
	$3
endsnippet

global !p
from vim_hl037.UltiSnips import *

def useVarNameAssignment(plc):
	@recompute(plc)
	def op(snip, t):
		m = re.search(r'\b(\w+)\s*\=', t[plc])
		return m[plc] if m else (t[plc] if ' ' not in t[plc] else '')
	return op
		
# T = snip.store.tmp
# B = snip.store.buffer
# F = snip.store.file
# S = snip.store.session
# C = snip.store.common
# _once = None
# 
# def once():
# 	global _once
# 	if _once is None:
# 		_once = T['once', True]
# 		T.once = False
# 	return _once
# 
# class StoreProxy(object):
# 	def __init__(self, tab, store, key=None):
# 		self.store = store
# 		self.tab = tab
# 		self.key = None
# 		if key is not None:
# 			self.__getitem__(key)
# 	
# 	def __getitem__(self, key):
# 		if self.key is not None:
# 			raise RuntimeError("Key already assigned")
# 		if not isinstance(key, tuple):
# 			key = key, ''
# 		snip.rv = self.store[key]
# 		self.key = key[0]
# 	
# 	def __getattr__(self, key):
# 		return self.__getitem__(key)
# 
# class DummyProxy(object):
# 	def __getitem__(self, key):
# 		return None
# 	def __getattr__(self, key):
# 		return self.__getitem__(key)
# 	
# 
# class TabMem(object):
# 	def __call__(self, tab, store, key=None):
# 		if once():
# 			r = StoreProxy(tab, store, key)
# 			I['_TabMemProxies', []].append(r)
# 			return r
# 		else :
# 			return DummyProxy()
# 	
# 	def do(self):
# 		for p in I['_TabMemProxies', []]:
# 			if p.key is None:
# 				raise RuntimeError('A tab_mem has no key')
# 			p.store[p.key] = t[p.tab]
# 
# mem_tab = TabMem()
# 	

endglobal

snippet hguard "Header Guard" b
#ifndef `!p snip.rv = fn.upper().replace('.', '_')`
#define `!p snip.rv = fn.upper().replace('.', '_')`

$0

#endif // `!p snip.rv = fn.upper().replace('.', '_')`
endsnippet

snippet i< "include <" b
#include <$1>$0
endsnippet

snippet i" "include <" b
#include "$1"$0
endsnippet

context "eol(snip)"
snippet "#i " "#include" brA
#include 
endsnippet

context "eol(snip)"
snippet "#i<" "include <" brA
#include <$1>$0
endsnippet

context "eol(snip)"
snippet '#i"' "include <" brA
#include "$1"$0
endsnippet

context "eol(snip)"
snippet "#d " "#define" brA
#define $1 $2
endsnippet

context "eol(snip)"
snippet "#did " "#ifndef #define" brA
#ifndef $1
#define $1 $2
#endif
endsnippet

context "eol(snip)"
snippet "#if " "#if" brA
#if $1
$2
#endif
endsnippet

context "eol(snip)"
snippet "#ifd " "#ifdef" brA
#ifdef $1
$2
#endif
endsnippet

context "eol(snip)"
snippet "#id " "#ifdef" brA
#ifdef $1
$2
#endif
endsnippet

context "eol(snip)"
snippet "#ifnd " "#ifndef" brA
#ifndef $1
$2
#endif
endsnippet

context "eol(snip)"
snippet "#ind " "#ifndef" brA
#ifndef $1
$2
#endif
endsnippet

context "eol(snip)"
snippet "#e " "#else" brA
#else
$0
endsnippet

context "eol(snip)"
snippet "#ei " "#else if" brA
#elif $1
$0
endsnippet

snippet main "main" b
int main(int argc, char * argv[]){
	$0
	return 0;
}
endsnippet	

snippet r "return"
return 
endsnippet

snippet cl "class" b
class $1{
public:
	$1();
	~$1();
	$2
};

endsnippet

snippet s "struct" b
struct $1{
	$2
};
endsnippet

snippet u "union" b
union $1{
	$2
};
endsnippet

snippet e "enum" b
enum $1{
	$2
};
endsnippet

snippet ts "struct" b
struct $1{
	$2
};
typedef struct $1 $1_t;
endsnippet

snippet tu "union" b
union $1{
	$2
};
typedef union $1 $1_t;
endsnippet

snippet te "enum" b
enum $1{
	$2
};
typedef enum $1 $1_t;
endsnippet

snippet t "template" w
template <$1>
$0
endsnippet

snippet tn "typename" w
typename 
endsnippet

snippet m "method" b
$1($2){
	$3
}
endsnippet

snippet mi "method" b 
inline $1($2){
	$3
}
endsnippet

snippet f "method" b
$1($2){
	$3
}
endsnippet

snippet fi "method" b
inline $1($2){
	$3
}
endsnippet

snippet sm "static method" b
static $1($2){
	$3
}
endsnippet

snippet smi "static method" b
static inline $1($2){
	$3
}
endsnippet

snippet test "test header" b
#define CATCH_CONFIG_MAIN
#include <hl037/test.hpp>

namespace test_$1 {

$0

}
endsnippet

snippet TC "Test case" b
TEST_CASE("$1"){
	$0
}
endsnippet

snippet TS "Test section" b
SECTION("$1"){
	$0
}
endsnippet

snippet TR "Test Require" b
REQUIRE($1)
endsnippet

snippet ptd "Parameterized test data" b
DECLARE_PARAMS_SECTION(${1:`!p mem_tab(1, B, 'params_section')`}){

DECLARE_PARAM_TYPE{
	const char * name;
	$2
};

DATA_CASE_TEST(PARAM_TYPE & param, $3){
	$0
}

};
`!p mem_tab.do()`
endsnippet

snippet pt "Parameterized test" b
BEGIN_PARAMS_SECTION(${1:`!p mem_tab(1, B, 'params_section') `})
	DATA_CASE(${2:`!p mem_tab(2, B, 'data_case') `})$0
END
`!p mem_tab.do()`
endsnippet

snippet dc "Data case" b
DATA_CASE`!p snip.rv='_n' if ',' in t[1] else ''`(${1:`!p mem_tab(1, B).data_case `})
`!p mem_tab.do()`
endsnippet

snippet ddc "declare Data case" b
DECLARE_DATA_CASE(${1:`!p mem_tab(1, B).data_case `}) {
	$0
};
`!p mem_tab.do()`
endsnippet

snippet dcu "data case unit" b
{
	"$1",
	$2
},
endsnippet

# snippet test "test header" b
# #include <criterion/criterion.h>
# #include <criterion/parameterized.h>
# 
# $0
# endsnippet
# 
# global !p
# 
# def test_suite_name(tab):
# 	if once():
# 		snip.rv=F["test_suite_name", ""]
# 	T.test_suite_name = t[tab]
# 
# # def test_type_params(tab, step):
# # 	if once():
# # 		if step == B['test_param_last_step', step]:
# # 			snip.rv = ''
# # 		else :
# # 			B.test_param_last_step = step
# # 			snip.rv = B.test_type_params
# # 	else :
# # 		B.test_type_params = t[tab]
# 
# endglobal
# 
# snippet ft "test" b
# Test(${1:`!p test_suite_name(1)`}, $2){
# 	$0
# }
# endsnippet
# 
# snippet pt "test" b
# `!p type_ = f'{t[1]}__{t[2]}_params_t'`
# struct `!p snip.rv = type_` {
# 	$3
# };
# 
# ParameterizedTestParameters(${1:`!p test_suite_name(1)`}, $2) {
# 	static `!p snip.rv = type_` params[] = {
# 	};
# 
# 	size_t nb_params = sizeof(params) / sizeof(decltype(params[0]));
# 	return cr_make_param_array(decltype(params[0]), params, nb_params);
# }
# 
# ParameterizedTest(`!p snip.rv = type_` *param, $1, $2) {
# 	$0
# }
# endsnippet


# snippet test "test header" b
# #include <cxxtest/TestSuite.h>
# endsnippet
# 
# snippet mt "test method" b
# void test_$1(){
# 	$2
# }
# endsnippet
# 
# snippet clt "class" b
# class Test$1 : public CxxTest::TestSuite{
# public:
# 	$2
# };
# endsnippet
# 
# snippet tsu "Test set up" b
# void setUp(){
# 	$1
# }
# endsnippet
# 
# snippet ttd "Test tear down" b
# void setDown(){
# 	$1
# }
# endsnippet

snippet c "const"
const $1 = $2;
endsnippet

snippet cc "constexpr"
constexpr $1 = $2;
endsnippet

snippet cr "const reference" i
const $1 & $2
endsnippet

snippet sc "static const"
static const $1 = $2;
endsnippet

snippet scc "static constexpr"
static constexpr $1 = $2;
endsnippet

priority 1
snippet 'cv\*' "const void *" rA 
const void * $0
endsnippet

priority 0
snippet 'v\*' "void *" rA 
void * $0
endsnippet

priority 1
snippet 'cc\*' "const char *" rA 
const char * $0
endsnippet

priority 0
snippet 'c\*' " char *" rA 
char * $0
endsnippet

priority 1
snippet 'cb\*' "const unsigned char *" rA 
const unsigned char * $0
endsnippet

priority 0
snippet 'b\*' "unsigned char *" rA 
unsigned char * $0
endsnippet


context "eol(snip)"
snippet "for " "for" brA
for($1 ; $2 ; $3){
	$0
}
endsnippet

context "eol(snip)"
snippet "for<" "for" brA
`!p var = useVarNameAssignment(1)
`for($1 ; `!p snip.rv=var(snip, t)` < $2 ; ++`!p snip.rv=var(snip, t)`){
	$0
}
endsnippet

context "eol(snip)"
snippet "for>" "for" brA
`!p var = useVarNameAssignment(1)
`for($1 ; `!p snip.rv=var[1]` >= $2 ; --`!p snip.rv=var[1]`){
	$0
}
endsnippet

context "eol(snip)"
snippet "for:" "for" brA
for(auto && $1:$2){
	$0
}
endsnippet

context "eol(snip)"
snippet "if " "if" brA
if($1){
	$2
}
endsnippet

context "eol(snip)"
snippet "elif " "elif" brA
else if($1) {
	$2
}
endsnippet

context "eol(snip)"
snippet "else " "else" brA
else {
	$2
}
endsnippet

context "eol(snip)"
snippet "while " "while" brA
while($1) {
	$2
}
endsnippet

context "eol(snip)"
snippet "do " "do while" brA
do {
	$2
} while($1);
endsnippet

context "eol(snip)"
snippet "switch " "switch case" brA
switch($1) {
	$2
	default:
	{
		$3
	}
}
endsnippet

context "eol(snip)"
snippet "case " "case" brA
case $1:
{
	$2
}
break;
endsnippet

snippet ow "gsl::owner" 
gsl::owner<$1*>
endsnippet

snippet ? "(()?():())" 
(($1) ? ($2) : ($3))
endsnippet

snippet "scast<" "static_cast<>()" rA
static_cast<$1>($2)
endsnippet

snippet "rcast<" "reinterpret_cast<>()" rA
reinterpret_cast<$1>($2)
endsnippet

snippet "ccast<" "const_cast<>()" rA
const_cast<$1>($2)
endsnippet

snippet "sc<" "static_cast<>()" rA
static_cast<$1>($2)
endsnippet

snippet "rc<" "reinterpret_cast<>()" rA
reinterpret_cast<$1>($2)
endsnippet

snippet "cc<" "const_cast<>()" rA
reinterpret_cast<$1>($2)
endsnippet

snippet us "using" b
using $1;
endsnippet

snippet usn "using" b
using namespace $1;
endsnippet

snippet n "namespace" b 
namespace $1{
$2
}
endsnippet

snippet "assert " "assert" rbA
TS_ASSERT_${1:EQUALS}($2, $3);
endsnippet

